1 - Masyvo vidurkis
Duotas dvimatis skaičių masyvas. Raskite visų elementų vidurkį.

Input
Masyvo eilučių ir stulpelių dydžiai n, m ir sveiki skaičiai aij (1 ≤ n, m ≤ 10,  − 106 ≤ aij ≤ 106).
Output
išvesti vidurkį paliekant du skaičius po kablelio.

#include <iostream>
#include <iomanip>  

using namespace std;
double arr[10][10], n, m, sum=0, average=0, i, j;
int main()
{

cin>>n>>m;
	for (int i = 0; i < n; ++i){
	for (int j = 0; j < m; ++j){
		cin>>arr[i][j];
		 }
		}

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
		sum+=arr[i][j];
		}
		}
		average=sum/(n*m);
		cout<<fixed<<setprecision(2)<<average;

    return 0;
}

2.1 - Duota skaičių seka. Raskite visų sekos elementų sumą.

Input
Sekos ilgis n ir sveiki skaičiai ai (1 ≤ n ≤ 10,  − 106 ≤ ai ≤ 106).
Output
išvesti sumą.

#include <iostream>
using namespace std;

int main()
{
	int arr[10], a, n, sum = 0;
	
	cin >> n;

	for (a = 0; a<n; a++)
	{
		cin >> arr[a];
	}

	for (a = 0; a<n; a++)
	{
		sum = sum + arr[a];
	}
	
	cout << sum;
	return 0;
}

2.2 - Duota skaičių seka. Raskite visų neigiamų sekos elementų vidurkį.

Input
Sekos ilgis n ir sveiki skaičiai ai (1 ≤ n ≤ 10,  − 106 ≤ ai ≤ 106).
Output
išvesti vidurkį paliekant du skaičius po kablelio. Jei vidurkis neegzistuoja, išvesti NO.

#include <iostream>
#include <iomanip>
using namespace std;

int main()
{
	int arr[10], a, n, counter = 0;
	double sum = 0;

	cin >> n;
	
			for (a = 0; a < n; a++){
			cin >> arr[a];
			}
			for (a = 0; a < n; a++){
				if (arr[a] < 0) {
					counter++;
					sum = sum + arr[a];
				}
			}
		
	if (counter != 0) {
		cout << fixed << setprecision(2) << sum / counter;
	}
		
	else { cout << "NO"; }
	return 0;
	}

2.3 - Duota skaičių seka. Raskite mažiausią lyginį sekos elementą.

Input
Sekos ilgis n ir sveiki skaičiai ai (1 ≤ n ≤ 10,  − 106 ≤ ai ≤ 106).
Output
išvesti atsakymą. Jei asakymas neegzistuoja, išvesti No.

#include <iostream>

using namespace std;
int main()
{
	int arr[10];
	int b[10];
	int n = 0;

	cin >> n;
	for (int a = 0; a < n; a++) {
		
		cin >> arr[a];
	}

	int j = 0;
	for (int a = 0; a < n; a++)
		if (arr[a] % 2 == 0) b[j++] = arr[a];
	if (j == 0) cout << "No" << endl;
	else {
		int bmin = b[0];
		for (int a = 0; a < j; a++)
			if (b[a] < bmin) bmin = b[a];
		cout << bmin << endl;
	}
	return 0;
}

2.4 - Duota skaičių seka. Raskite didžiausio neigiamo elemento poziciją.

Input
Sekos ilgis n ir sveiki skaičiai ai (1 ≤ n ≤ 10,  − 106 ≤ ai ≤ 106).
Output
išvesti atsakymą. Jei yra keli vienodi didžiausi neigiami elementai, didesniu laikomas tas kuris yra pirmesnis. Jei toks elementas neegzistuoja, išvesti NERA.

#include <iostream>

using namespace std;


int n, a, arr[10];
int main()
{
	cin >> n;
	for (int a = 0; a < n; a++) {
		cin >> arr[a];
	}
	int Result = 0;
	int index = 0;
	for (int a = 0; a < n; a++)
	{
		if (arr[a] < 0 && (Result == 0 || arr[a] > Result))
		{
			Result = arr[a];
			index = a + 1;
		}
	}

	if (Result < 0) {
		cout << index<<endl;
	}
	else { cout << "NERA"<<endl; }


	return 0;
}


2.5 - Deimantas
Kvadratiniame masyve atvaizduokite deimantą.Deimanto kontūrams naudojamas simbolis "O", likusi erdvė užpildoma simboliais "-".

Input
Masyvo dydis n (nelyginis skaičius)(1 ≤ n ≤ 101).
Output
Atspausdinkite deimantą nepalikdami tarpų.

#include <iostream>
#include <iomanip>  
#include <cstdlib>

using namespace std;
int arr[101][101], n;

int main()
{
	cin >> n;
	n = n / 2;

	for (int i = -n; i <= n; i++) {
		for (int j = -n; j <= n; j++) {
			if (abs(i) + abs(j) == n) {
				cout << "O";
			}
			else { cout << "-"; }
		}
		cout << endl;
	}
	return 0;
}

2.6 - Duotas dvimatis kvadratinis skaičių masyvas. Pasukite masyvą laikrodžio rodyklės kryptimi.

Input
Masyvo dydis n ir sveiki skaičiai aij (1 ≤ n ≤ 10,  − 106 ≤ aij ≤ 106).
Output
išvesti pasuktą masyvą elementus atskiriant tarpais (eilutės gale tarpų nenaudoti).

#include <iostream>
#include <iomanip>  
 
using namespace std;
int arr[10][10], n;

int main()
{
	cin >> n;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> arr[i][j];
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = n-1; j >= 0; j--) {
				if (j == 0) cout << arr[j][i];
				else cout << arr[j][i]<<" ";
			}
			cout << endl;

		}
	return 0;
}

2.7 - Izulus skaicius
Duota skaičių seka. Sekos narys vadinamas įžūliu, jeigu jis yra didesnis už savo kaimynus. Raskite mažiausią teigiamą įžūlų skaičų.

Input
Sekos ilgis n ir sveiki skaičiai ai (2 ≤ n ≤ 100,  − 106 ≤ ai ≤ 106).
Output
išvesti atsakymą, jei toks neegzistuoja išveskite NO.

#include <iostream>
using namespace std;
int main()
{
	int a[10], b[10], i, n, k = 0;
	cin >> n;
	
	for (i = 0; i<n; i++)
	{
		cin >> a[i];
	}
	
	for (i = 0; i<n; i++)
	{
		if (i == 0 && a[i]>a[i + 1])
		{
			b[k] = a[i];
			k++;
		}
		else if (i == (n - 1) && a[i]>a[i - 1])
		{
			b[k] = a[i];
			k++;
		}
		else if (a[i]>a[i + 1] && a[i]>a[i - 1])
		{
			b[k] = a[i];
			k++;
		}
		
	}
	int min = 9999999;
	for (int i = 0; i < k; i++) {
		if (b[i] <= min && b[i] > 0) {
			min = b[i];

		}

	}
	if (k == 0 || min == 9999999) cout << "NO" << endl;
	else cout << min << endl;
	return 0;

}

2.8 - Lyginumo klasės
Sveikieji skaičiai skirstomi į dvi "lyginumo" klases: lyginiai ir nelyginiai. Į seką, kurios visi elementai yra vienodo lyginumo, Petriukas įterpė priešingo lyginumo skaičių. Kurios lyginumo klasės skaičius buvo įterptas į seką?

Input
Sekos ilgis n ir sveiki skaičiai ai (3 ≤ n ≤ 1012,  − 106 ≤ ai ≤ 106).
Output
išvesti Petriuko įterpto skaičiaus lyginumo klasė: LYGINIS arba NELYGINIS

#include <iomanip>
#include <iostream>

using namespace std;

int main()
{
	long long n, l;
	long long arr[500];
	l = 0;

	cin >> n;
	if (n > 500) { n = 499; }
	for (int i = 1; i <= n; i++) {
		cin >> arr[i];
	}

	for (int i = 1; i <= 3; i++) {
		if (arr[i] % 2 == 0) l++;
	}
	if (l > 1) cout << "NELYGINIS" << endl;
	else cout << "LYGINIS" << endl;
	return 0;
}


2.9 - Vidurkis su sąlyga
Duotas dvimatis skaičių masyvas. Apskaičiuokite elementų vidurkį eilutės, kurioje yra didžiausias masyvo elementas.

Input
Masyvo eilučių ir stulpelių dydžiai n, m ir sveiki skaičiai aij (1 ≤ n, m ≤ 10,  − 106 ≤ aij ≤ 106).
Output
išvesti atsakymą paliekant du skaitmenis po kablelio. Jei yra keli vienodi didžiausi elementai, didesniu laikomas pirmesnis.

#include <iostream>
#include <iomanip>  

using namespace std;
double arr[10][10], n = 0, m = 0;
int main()
{

	cin >> n >> m;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cin >> arr[i][j];
		}
	}
	double sum = 0;
	double average = 0;
	int index = 0;
	double max = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (max == arr[i][j]) {
				j++;
			}
			else if (max < arr[i][j]) {
				max = arr[i][j];
				index = i;
			}
			
		}
	}
	for (int i = index; i <= index; ++i) {
		for (int j = 0; j < m; ++j) {
			sum = sum + arr[i][j];
			average = sum / m;
		}
	}
	//cout<<max<<endl;
	//cout<<index<<endl;
	//cout << sum << endl;

	cout << fixed << setprecision(2) << average << endl;
	return 0;
}

2.10 - Raskite skaičiaus ab skaitmenų kiekį.

Input
Natūralūs skaičiai a, b (1 ≤ a, b ≤ 1016).
Output
išvesti skaitmenų kiekį.

#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

int main()
{
	double long  a, b;
	long long c;
	int d;
	d = 0;

	cin >> a >> b;
	c = a;
	if (a > 1000000) {
		cout << fixed << setprecision(0) << abs(log10(a)*b + 1) << endl;
	}

	else {

		c = pow(a, b);
		while (c > 0) {
			c = c / 10;
			d++;
		}
		cout << d << endl;
	}
	return 0;
}

2.11 -  Antros eilutės max
Duotas dvimatis skaičių masyvas. Raskite didžiausią antros eilutės elementą.

Input
Masyvo eilučių ir stulpelių dydžiai n, m ir sveiki skaičiai aij (1 ≤ n, m ≤ 10,  − 106 ≤ aij ≤ 106).
Output
išvesti atsakymą. Jei toks neegzistuoja, išvesti No.

#include <iostream>
#include <iomanip>  

using namespace std;
int arr[10][10], n, m;
int main()
{

	cin >> n >> m;
	if (n <= 1 || m <= 1) { cout << "No"<<endl; }
	else{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
		}
	}
	int max = -9999999;
	for (int k = 0; k < m; k++) {
		if (arr[1][k] >= max) {
			max = arr[1][k];
		}
	}
	
		cout << max << endl;
	}

	return 0;
}

2.12 - Ar skirtingi?
Duota skaičių seka. Patikrinkite ar visi sekos elementai yra skirtingi skaičiai.

Input
Sekos ilgis n ir sveiki skaičiai ai (1 ≤ n ≤ 10,  − 106 ≤ ai ≤ 106).
Output
išvesti TAIP arba NE.

#include <iostream>
using namespace std;
int k, origVal = 0, newVal = 0, n, a, arr[10];
int main()
{
	cin >> n;
	for (a = 0; a < n; a++) {
		cin >> arr[a];
	}

		for (a = 0; a < n; a++){
				origVal = arr[a];

				for (k = a + 1; k < n; k++){
					if (origVal == arr[k])	
						{newVal = 1;}	
				}	
		}
	
		if (newVal == 1)
		{cout << "NE" << endl;}
		else{cout << "TAIP" << endl;}
		return 0;
	
}

2.13 - Didžiausias nesikartojantis
Duota skaičių seka. Raskite didžiausią nesikartojantį skaičių.

Input
Sekos ilgis n ir sveiki skaičiai ai (1 ≤ n ≤ 10,  − 106 ≤ ai ≤ 106).
Output
išvesti atsakymą, jei toks neegzistuoja išveskite NO.

#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
	int arr[10];
	int b[10];
	int n = 0, kart = 0;
	int max = -9999999;
	cin >> n;
	if (n == 1) {
		cin >> arr[1];
		cout << arr[1] << endl;;
	}
	else {
		for (int i = 0; i < n; i++) {

			cin >> arr[i];
			b[i] = arr[i];
		}


		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				if (arr[i] == arr[j]) {
					b[i] = -9999999;
					b[j] = -9999999;
				}
			}
		}

		for (int i = 0; i < n; i++) {
			if (b[i] > max) {
				max = b[i];
			}
		}
		
		for (int i = 0; i < n; i++) {

			if (b[i] == -9999999) {
				kart++;
			}

		}
		if (kart == n) { cout << "NO" << endl; }
		else { cout << max << endl; }
	}
	return 0;
}

2.14 -  Žemiau pagrindinės įstr.

Duotas dvimatis kvadratinis skaičių masyvas. Apskaičiuokite sumą elementų, esančių žemiau pagrindinės įstrižainės.

Input
Masyvo dydis n ir sveiki skaičiai aij (1 ≤ n ≤ 10,  − 106 ≤ aij ≤ 106).
Output
išvesti atsakymą. Jei atsakymas neegzistuoja, išvesti No.

#include <iostream>
#include <iomanip>  

using namespace std;
int arr[10][10], n;
int main()
{

	cin >> n;
	if (n <= 1) { cout << "No" << endl; }
	else {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> arr[i][j];
			}
		}
		int sum = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i > j) {
					sum = sum + arr[i][j];
				}
			}
		}

		cout << sum<< endl;
	}

	return 0;
}

2.15 - Max įstr. srityje
Duotas dvimatis kvadratinis skaičių masyvas. Raskite didžiausią elementą, kuris būtų žemiau šalutinės įstrižainės ir nepatenkantis į pagrindinę įstrižainę.

Input
Masyvo dydis n ir sveiki skaičiai aij (1 ≤ n ≤ 10,  − 106 ≤ aij ≤ 106).
Output
išvesti atsakymą, jei toks neegzistuoja išveskite "Ne".

#include <iostream>
#include <iomanip>  

using namespace std;
int arr[10][10], n, max = -9999999;
int main()
{

	cin >> n;
	if (n > 2 && n < 11) 
	 {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> arr[i][j];
			}
		}
	
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i!=j &&j >= n - i) {
					if (max < arr[i][j]) {
						max = arr[i][j];
					}
				}
			}
		}

		cout << max << endl;
	}
	else { cout << "Ne"; }

	return 0;
}
